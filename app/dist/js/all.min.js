'use strict';

// Declare app level module which depends on views, and components
angular.module('myApp', [
  'ngRoute',
  'myApp.components.factories',
  'myApp.products.controllers',
  'myApp.products.services',
  'myApp.products.factories',
  'myApp.main.content.controllers',
  'myApp.jobs.controllers',
  'myApp.sitemap.controllers',
  'myApp.version',
  'myApp.directive'
]).
config(['$locationProvider', '$routeProvider', function($locationProvider, $routeProvider) {
  $locationProvider.hashPrefix('!');

  $routeProvider.otherwise({redirectTo: '/index'});
}]);

(function () {
    'use strict';

    // Declare modules and their dependencies

    // myApp.view1
    angular.module('myApp.components.factories', []);

})();
(function () {
    'use strict';

    // Declare using array notation to be compatible with minifying
    angular.module('myApp.components.factories').factory('eventManager', ['$rootScope',
        eventManagerFactory]);

    function eventManagerFactory($rootScope) {
        // Service factory function

        function eventManager() {
            // Service class constructor function

            // Enforce 'new' operator usage
            if (false === (this instanceof eventManager)) {
                throw new Error('Must be invoked with "new" operator');
            }

            return this;
        }

        angular.extend(eventManager.prototype, {
            // Shared members

            // Save event

            saveEvent: function (data) {
                $rootScope.$broadcast(eventView1, data);
            },

            onSaveEvent: function (scope, listener) {
                var unregister = scope.$on(eventView1, function (evt, data) {
                    listener(evt, data);
                });
                return unregister;
            }
        });

        // Private static members
        var eventView1 = 'event1.evt';

        // Finally, return new instance
        return new eventManager();
    }

})();

'use strict';

angular.module('myApp.version.interpolate-filter', [])

.filter('interpolate', ['version', function(version) {
  return function(text) {
    return String(text).replace(/\%VERSION\%/mg, version);
  };
}]);

'use strict';

angular.module('myApp.version.version-directive', [])

.directive('appVersion', ['version', function(version) {
  return function(scope, elm, attrs) {
    elm.text(version);
  };
}]);

'use strict';

angular.module('myApp.version', [
  'myApp.version.interpolate-filter',
  'myApp.version.version-directive'
])

.value('version', '0.1');

/// <reference path="../../../templates/name-template.html" />
angular.module('myApp.directive', [])
    .directive('valueDisplay', function () {
        return {
            restrict: 'EA', //E = element, A = attribute, C = class, M = comment         
            scope: {
                //@ reads the attribute value, = provides two-way binding, & works with functions
                user: '='
            },
            templateUrl: 'templates/name-template.html',
            link: function ($scope, element, attrs) {
                //logic goes here
                console.log($scope.user)
            } //DOM manipulation
        }
    });
/// <reference path="../../../templates/name-template.html" />
angular.module('myApp.directive', [])
    .directive('navigationBar', function () {
        return {
            restrict: 'EA', //E = element, A = attribute, C = class, M = comment         
            scope: {
                //@ reads the attribute value, = provides two-way binding, & works with functions
                user: '='
            },
            templateUrl: 'templates/navigation-bar.html',
            link: function ($scope, element, attrs) {
                //initialize object and set default view
                $scope.activeView = {
                    index: true,
                    products: false,
                    destinations: false,
                    jobs: false,
                    sitemap: false
                }
                $scope.viewClicked = function (viewName) {
                    //set all project properties to false
                    angular.forEach($scope.activeView, function (value, key) {
                        $scope.activeView[key] = false;
                        console.log($scope.activeView, '$scope.activeView');

                    });
                    //switch cases on menu selected view
                    switch (viewName) {
                        case 'index':
                            $scope.activeView.index = true;
                            break;
                        case 'products':
                            $scope.activeView.products = true;
                            break;
                        case 'destination':
                            $scope.activeView.destinations = true;
                            break;
                        case 'jobs':
                            $scope.activeView.jobs = true;
                            break;
                        case 'sitemap':
                            $scope.activeView.sitemap = true;
                            break;
                            

                    }
                }
            } //DOM manipulation
        }
    });
(function () {
    'use strict';

    // Declare modules and their dependencies

    // myApp.view1
    angular.module('myApp.products.controllers', ['myApp.products.services', 'myApp.components.factories']);
    angular.module('myApp.products.services', []);
    angular.module('myApp.products.factories', []);

})();
(function () {
    'use strict';

    angular.module('myApp.products.factories').factory('fieldDefinitionSet', [fieldDefinitionSetFactory]);

    // NOTE This service holds custom static classes for domain models.
    // If it did not depend on anything, it could be defined as an Angular module.value() or module.constant() as well.

    function fieldDefinitionSetFactory() {
        // Service factory function

        // Configure for all possible UI input fields mapping all model 'parameters'
        // NOTE: for select input fields (isSelect: true) the defaulValue is the default selected lookup value in choices array

        var fieldDefinitionSet = {
            'fname': new fieldDefinition({
                name: 'fname',
                modelName: 'fname',
                tag: 'fname',
                isTextBox: true,
                isColumn: true,
                placeholder: 'First name'
            }),
            'lname': new fieldDefinition({
                name: 'lname',
                modelName: 'lname',
                tag: 'lname',
                isTextBox: true,
                isColumn: true,
                placeholder: 'Last name'
            }),
            'username': new fieldDefinition({
                name: 'username',
                modelName: 'username',
                tag: 'username',
                isTextBox: true,
                isColumn: true,
                placeholder: 'Username'
            }),
            'email': new fieldDefinition({
                name: 'email',
                modelName: 'email',
                tag: 'email',
                isTextBox: true,
                isColumn: true,
                placeholder: 'Email'
            }),
            'address': new fieldDefinition({
                name: 'address',
                modelName: 'address',
                tag: 'address',
                isTextBox: true,
                isColumn: true,
                placeholder: 'Address'
            }),
            'testdsdsadsa': new fieldDefinition({
                name: 'test',
                modelName: 'test',
                tag: 'test',
                isTextBox: true,
                isColumn: true,
                placeholder: 'test'
            })
        };

        // Finally, return new instance
        return fieldDefinitionSet;
    };

    function fieldDefinition(initial) {
        // Class constructor function

        // Enforce 'new' operator usage
        if (false === (this instanceof fieldDefinition)) {
            throw new Error('Must be invoked with "new" operator');
        }

        // Public instance members
        this.name;
        this.modelName;
        this.tag;
        this.isTextBox;
        this.isColumn;
        
        // Initialize
        _init.call(this, initial);

        return this;

        // Private instance members

        function _init(initial) {
            this.name = initial.name;
            this.modelName = initial.modelName;
            this.tag = initial.tag;
            this.isTextBox = initial.isTextBox;
            this.isColumn = initial.isColumn;            
        }
    }

    // Public shared members
    fieldDefinition.prototype.clone = function () {
        return new fieldDefinition(this);
    }

})();

(function () {
    'use strict';

    angular.module('myApp.products.factories').factory('fieldRepository', ['fieldDefinitionSet',
        fieldRepositoryFactory]);

    // NOTE This service holds custom static classes for domain models.
    // If it did not depend on anything, it could be defined as an Angular module.value() or module.constant() as well.

    function fieldRepositoryFactory(fieldDefinitionSet) {
        // Service factory function

        function fieldRepository() {
            // Service class constructor function

            // Enforce 'new' operator usage
            if (false === (this instanceof fieldRepository)) {
                throw new Error('Must be invoked with "new" operator');
            }

            // Public instance members 

            this.getView1Fields = function () {
                return view1InputFields;
            };
            this.getView2Fields = function () {
                return view2InputFields;
            }

            // Initialize
            init();

            return this;

            // Private instance members 

            var view1InputFields;
            var view2InputFields;
           
            function init() {
                // use predefind input parameters on initialization
                view1InputFields = getView1Fields();
                view2InputFields = getView2Fields();
            }

            function getView1Fields() {

                //set view1 input fields
                var view1Fields = [
                    fieldDefinitionSet['fname'],
                    fieldDefinitionSet['lname'],
                    fieldDefinitionSet['username'],
                    fieldDefinitionSet['address'],
                    fieldDefinitionSet['email'],
                    fieldDefinitionSet['testdsdsadsa']
                ];

                return view1Fields;
            }
            
            function getView2Fields() {

                //set view2 input fields
                var view2Fields = [{
                    groupTitle: 'Two columns of input fields',

                    firstInspection: {
                        leftSide: {
                            paramDefs: [
                                fieldDefinitionSet['fname'],
                                fieldDefinitionSet['lname'],
                            ],
                        },
                        rightSide: {
                            paramDefs: [
                                fieldDefinitionSet['email'],
                                fieldDefinitionSet['username'],
                                fieldDefinitionSet['address'],
                            ]
                        },

                    }
                }];


                return view2Fields;
            }
        }

        return new fieldRepository();
    };

})();

(function () {
    'use strict';

    // Declare using array notation to be compatible with minifying
    angular.module('myApp.products.controllers').
        controller('fieldController', [
            '$scope', 'fieldRepository', 'fieldDefinitionSet', 'eventManager', fieldController]);

    function fieldController($scope, fieldRepository, fieldDefinitionSet, eventManager) {
        // Controller class constructor function

        // Private instance members        
        
        // Initialize
        init();

        return this;

        function init() {
            //controller logic goes here    
            //show parameters on initialization
            setPanesFrom();

            //eventManager.onSaveEvent($scope, function (evt, data) {
            //    save(data);
            //});
            

            //$scope.choices = {
            //    paramPackageChoices: loadGender()
            //};

            
            // set scope actions 
            $scope.parameterValueChanged = parameterValueChanged;
            


        }

        // Show/ hide/ store/ restore parameter panes

        function setPanesFrom() {
            $scope.view1FieldGroup = fieldRepository.getView1Fields();
            $scope.view2FieldGroup = fieldRepository.getView2Fields();
        }

        function hidePanes() {
            $scope.fieldGroup = null;
        }

        // Show/ hide/ store/ restore parameter values

        function setDefaultValues() {
            // for each parameter definition ...
            Object.keys(fieldDefinitionSet).forEach(function (paramName) {
                // grab its default value and set that on
                // the actual parameter within current selection

                var paramDef = fieldDefinitionSet[paramName];

                var defaultValue = paramDef.defaultValue;
                var modelName = paramDef.modelName;

                $scope.selection[modelName] = defaultValue;
            });

        }
        
        // clear all values
        function emptyParamValues() {
            var paramValues = Object.keys(fieldDefinitionSet).map(function (paramName) {
                // grab the actual parameter within current selection
                // and return its current value 
                var paramDef = fieldDefinitionSet[paramName];

                var modelName = paramDef.modelName;
                var value = $scope.selection[modelName];
                $scope.selection[modelName] = null;
                return {
                    modelName: modelName,
                    value: null,
                };
            });            
        }

        function restoreValues() {
            var paramValues = amplify.store(paramValuesKey);
            // for each stored parameter value ...
            paramValues.forEach(function (valueItem) {
                // grab the related parameter within current selection
                // and set its value from the stored one

                var modelName = valueItem.modelName;
                var value = valueItem.value;

                if (valueItem.modelName === 'paramDate' && value !== null) {
                    value = value.toString('dd/MM/yyyy');
                }
                $scope.selection[modelName] = value;

            });

        }

        function parameterValueChanged(modelName) {
            //alert(modelName);
        }

        function setLoading(loading) {
            //implement loader
        }
        
    };

})();
'use strict';

angular.module('myApp.products.controllers')

.config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/products', {
        templateUrl: 'products.html',
        controller: 'productsCtrl'

    });
}])

.controller('productsCtrl', ['$scope', 'view1Service', 'eventManager', productsCtrl]);

function productsCtrl($scope, view1Service, eventManager) {
        //controller logic goes here    
        $scope.user = view1Service.userInfo();
        $scope.save = save;

        function save() {
            eventManager.saveEvent('save');
        }
    }
    
(function () {
    'use strict';

    // Declare using array notation to be compatible with minifying
    angular.module('myApp.products.controllers').
        controller('saveController', [
            '$scope', 'eventManager', saveController]);

    function saveController($scope, eventManager) {
        // Controller class constructor function

        // Private instance members        

        // Initialize
        init();

        return this;

        function init() {          
            //controller logic goes here    
            eventManager.onSaveEvent($scope, function (evt, data) {
                save(data);
            });

            function save(data) {
                //alert(data);
            }
        } 
    };

})();
(function() {
    'use strict';

    angular.module('myApp.products.services').service('view1Service', [view1Service]);

    function view1Service() {

            this.userInfo = function () {
                var user = {
                    fname: "Julian",
                    lname: "Heissl",
                    username: 'jheissl',
                    email: 'jheissl@cloud.com',
                    address: "London"
                }

                return user;
            }        
        }
})();
(function () {
    'use strict';

    // Declare all modules and their dependencies

    // shared
    angular.module('myApp.main.content.controllers', ['ngRoute'])


})();
'use strict';

angular.module('myApp.main.content.controllers')

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/index', {
    templateUrl: 'main-content.html',
    controller: 'mainContentCtrl'
  });
}])

.controller('mainContentCtrl', ['$scope', 'eventManager', mainContentCtrl]);

function mainContentCtrl($scope, eventManager) {
    //controller logic goes here    
    $scope.user = {
        fname: 'faruk',
        lname: 'pobric'
    }
    $scope.save = save;

    function save() {
        eventManager.saveEvent('save');
    }
}

(function () {
    'use strict';

    // Declare all modules and their dependencies

    // shared
    angular.module('myApp.jobs.controllers', ['ngRoute'])


})();
'use strict';

angular.module('myApp.jobs.controllers')

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/jobs', {
    templateUrl: 'jobs.html',
    controller: 'jobsCtrl'
  });
}])

.controller('jobsCtrl', ['$scope', 'eventManager', jobsCtrl]);

function jobsCtrl($scope, eventManager) {
    //controller logic goes here    
}

(function () {
    'use strict';

    // Declare all modules and their dependencies

    // shared
    angular.module('myApp.sitemap.controllers', ['ngRoute'])


})();
'use strict';

angular.module('myApp.sitemap.controllers')

.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/sitemap', {
    templateUrl: 'sitemap.html',
    controller: 'sitemapCtrl'
  });
}])

.controller('sitemapCtrl', ['$scope', 'eventManager', sitemapCtrl]);

function sitemapCtrl($scope, eventManager) {
    //controller logic goes here    
}
